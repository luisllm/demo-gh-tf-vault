name: 'Staging - Deploy'

on:
  pull_request:
    branches: [ staging ]
    types: [opened, synchronize]
    paths:
      - 'terraform/**'
      - 'terraform_config/staging/**'
      - '.github/workflows/staging-deploy.yml'
    
permissions:
  contents: read
  # https://docs.github.com/en/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
  id-token: write
  pull-requests: write # Needed when OPA fails, to be able to write into the PR

env:
  ENVIRONMENT: 'staging'
  TERRAFORM_VERSION: '1.9.7'
  REGION: 'eu-west-1'

jobs:
  # https://github.com/terraform-linters/setup-tflint
  staging-tflint:
    name: 'Staging - tflint'
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./terraform

    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v4
      name: Checkout source code

    - uses: actions/cache@v4
      name: Cache plugin dir
      with:
        path: ~/.tflint.d/plugins
        key: ${{ matrix.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

    - uses: terraform-linters/setup-tflint@v4
      name: Setup TFLint
      with:
        tflint_version: v0.52.0

    - name: Show version
      run: tflint --version

    - name: Init TFLint
      run: tflint --init
      env:
        # https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/plugins.md#avoiding-rate-limiting
        GITHUB_TOKEN: ${{ github.token }}

    - name: Run TFLint
      run: tflint -f compact | tee tflint_output.txt
    
    - name: Comment TFLint Output on PR
      run: |
        if [ ! -s tflint_output.txt ]; then
          echo "### TFLint Output: No issues found" | gh pr comment ${{ github.event.pull_request.number }} --body-file -
        else
          first_line=$(head -n 1 tflint_output.txt)
          echo -e "### TFLint Output\n\`\`\`\n$first_line\n\`\`\`" | gh pr comment ${{ github.event.pull_request.number }} --body-file -
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  staging-terraform-init-format-plan-apply:
    name: 'Staging - Terraform Init, Format, Plan and Apply'
    needs: staging-tflint
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    # Configure AWS credentials with OIDC integration
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
        aws-region: ${{ env.REGION }}
    
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install Terraform    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config="../terraform_config/${{ env.ENVIRONMENT }}/backend.tf"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Validate
      run: terraform validate -no-color

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        terraform plan -input=false -var-file="../terraform_config/${{ env.ENVIRONMENT }}/input.tfvars" -out=plan.tfplan
        terraform show -json plan.tfplan > plan.json

    - name: Count Terraform Plan Actions and create GH comment in PR
      run: |
        action_counts=$(terraform show -json plan.tfplan | jq '{
          create: (.resource_changes | map(select(.change.actions[] == "create")) | length),
          update: (.resource_changes | map(select(.change.actions[] == "update")) | length),
          delete: (.resource_changes | map(select(.change.actions[] == "delete")) | length)
        }')
      
        create=$(echo $action_counts | jq '.create')
        update=$(echo $action_counts | jq '.update')
        delete=$(echo $action_counts | jq '.delete')
      
        if [ "$create" -eq "0" ] && [ "$update" -eq "0" ] && [ "$delete" -eq "0" ]; then
          echo -e "### Terraform Plan: No changes detected." | gh pr comment ${{ github.event.pull_request.number }} --body-file -
        else
          echo -e "### Terraform Plan Summary:\n- Resources to be created: $create\n- Resources to be updated: $update\n- Resources to be deleted: $delete" | gh pr comment ${{ github.event.pull_request.number }} --body-file -
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}      

    # Run terraform apply
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false -var-file="../terraform_config/${{ env.ENVIRONMENT }}/input.tfvars"