name: 'Terraform Destroy'

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      terraform_version:
        required: true
        type: string
      region:
        required: true
        type: string
    secrets:
      ROLE_TO_ASSUME:
        required: true

permissions:
  contents: read
  id-token: write

jobs:
  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
        aws-region: ${{ inputs.region }}
    
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform_version }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config="../terraform_config/${{ inputs.ENVIRONMENT }}/backend.tf"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Apply the Configuration
    - name: Terraform Destroy
      run: terraform destroy -auto-approve -input=false -var-file="../terraform_config/${{ inputs.ENVIRONMENT }}/input.tfvars"