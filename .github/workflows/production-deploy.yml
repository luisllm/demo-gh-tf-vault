name: 'Production - Deploy'

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize]
    paths:
      - 'terraform/**'
      - 'terraform_config/production/**'
      - '.github/workflows/production-deploy.yml'

permissions:
  contents: read
  # https://docs.github.com/en/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
  id-token: write
  issues: write # Needed so that GHA can create a GH issue for the TF apply approval
  pull-requests: write # Needed when OPA fails, to be able to write into the PR

env:
  ENVIRONMENT: 'production'
  TERRAFORM_VERSION: '1.9.7'
  REGION: 'eu-west-1'
  
jobs:
  production-infracost:
    name: 'Production - Infracost'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write # Required to post comments
    steps:
      - name: Setup Infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      # Checkout the base branch of the pull request (e.g. main/master).
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: '${{ github.event.pull_request.base.ref }}'

      # Generate Infracost JSON file as the baseline.
      - name: Generate Infracost cost estimate baseline
        run: |
          infracost breakdown --path=./terraform \
                              --terraform-var-file=../terraform_config/production/input.tfvars \
                              --format=json \
                              --out-file=/tmp/infracost-base.json

      # Checkout the current PR branch so we can create a diff.
      - name: Checkout PR branch
        uses: actions/checkout@v4

      # Generate an Infracost diff and save it to a JSON file.
      - name: Generate Infracost diff
        run: |
          infracost diff --path=./terraform \
                         --terraform-var-file=../terraform_config/production/input.tfvars \
                         --format=json \
                         --compare-to=/tmp/infracost-base.json \
                         --out-file=/tmp/infracost.json

      - name: Post Infracost comment
        run: |
            infracost comment github --path=/tmp/infracost.json \
                                     --repo=$GITHUB_REPOSITORY \
                                     --github-token=${{ github.token }} \
                                     --pull-request=${{ github.event.pull_request.number }} \
                                     --behavior=update \
                                     --policy-path="./policies/production-cost.rego"

  production-terraform-init-format-plan-apply:
    # Verify that the PR is coming from the staging branch
    if: github.event.pull_request.base.ref == 'main' && github.event.pull_request.head.ref == 'staging'
    name: 'Production - Terraform Init, Format, Plan and Apply'
    needs: [production-infracost]
    runs-on: ubuntu-latest
    #environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    # Configure AWS credentials with OIDC integration
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
        aws-region: ${{ env.REGION }}
    
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install Terraform    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config="../terraform_config/${{ env.ENVIRONMENT }}/backend.tf"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: | 
        terraform plan -input=false -var-file="../terraform_config/${{ env.ENVIRONMENT }}/input.tfvars" -out=plan.tfplan
        terraform show -json plan.tfplan > plan.json

    - name: Setup OPA
      uses: open-policy-agent/setup-opa@v2
      with:
        version: latest

    - name: Run OPA Tests
      run: |
        opaout=$(opa eval --data ../policies/production-instance-policy.rego --input plan.json "data.terraform.deny" | jq -r '.result[].expressions[].value[]')
        [ -z "$opaout" ] && exit 0 || echo "$opaout" && gh pr comment ${{ github.event.pull_request.number }} --body "### $opaout" && exit 1

    # A Github issue will be automatically created to approve the terraform plan before terraform apply is executed in production
    # https://github.com/trstringer/manual-approval
    # The URL created in the body of the issue is not generated correctly. Bugs to be fixed:
    # https://github.com/trstringer/manual-approval/issues/136
    # https://github.com/trstringer/manual-approval/issues/124
    - name: Manual Approval
      uses: trstringer/manual-approval@v1.9.1
      timeout-minutes: 5
      with:
        secret: ${{ github.TOKEN }}
        issue-title: "Please validate the Terraform plan before Terraform apply is executed in PRODUCTION"
        issue-body: "Please check the output of the Terraform plan and approve or deny, before it gets applied in PRODUCTION"
        approvers: luisllm
        minimum-approvals: 1
        exclude-workflow-initiator-as-approver: false
        additional-approved-words: 'yes'
        additional-denied-words: 'no'

    # Run terraform apply
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false -var-file="../terraform_config/${{ env.ENVIRONMENT }}/input.tfvars"